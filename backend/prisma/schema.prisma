generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  username  String    @unique @db.VarChar(30)
  password  String?
  isVerified Boolean  @default(false)
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  googleId String? @unique
  creator   Creator?
  purchases Purchase[]
  emailVerificationToken EmailVerificationToken[]
}

model Creator {
  id         Int     @id
  bio        String?
  avatarUrl  String?
  subdomain  String  @unique @db.VarChar(50)
  coverUrl   String?
  user       User    @relation(fields: [id], references: [id], onDelete: Cascade)
  plans      Plan[]
}

model Plan {
  id                    Int       @id @default(autoincrement())
  paddleProductId       String       @unique
  paddlePriceId         String       @unique
  title                 String
  slug                  String    @unique @db.VarChar(50)
  description           String
  price                 Decimal   @db.Decimal(10, 2)
  currency              String    @default("USD")
  originalPrice         Decimal?   @db.Decimal(10, 2)
  paddleDiscountId            String?
  image                 String?
  preview               String?
  markdown              String?
  metadata              Json?
  createdAt             DateTime  @default(now())
  creatorId             Int
  creator               Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  purchases             Purchase[]
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  amount    Decimal  @db.Decimal(10, 2)
  paddleOrderId String  @unique
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
}

model EmailVerificationToken {
  token     String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}